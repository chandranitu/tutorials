import scipy.optimize
import numpy as np

def parabola(x, a, b, c):
     return a*x**2 + b*x + c

params = [-0.1, 0.5, 1.2]
x = np.linspace(-5, 5, 31)
y = parabola(x, params[0], params[1], params[2])
plt.plot(x, y, label='analytical')  

plt.legend(loc='lower right')  

plt.show()


#small deviations are introduced as fitting a function to data generated by itself

r = np.random.RandomState(42)
y_with_errors = y + r.uniform(-1, 1, y.size)
plt.plot(x, y_with_errors, label='sample')  

plt.legend(loc='lower right')  

plt.show()

#-------
fit_params, pcov = scipy.optimize.curve_fit(parabola, x, y_with_errors)

for param, fit_param in zip(params, fit_params):
   print(param, fit_param)

y_fit = parabola(x, *fit_params)
plt.plot(x, y_fit, label='fit')  

plt.legend(loc='lower right')  

plt.show()


